- npm i express

- Khởi tạo dự án nodejs
   + npm init
   + Khởi chạy bằng node index.js

const express = required('express');
const app = express();
const port = 3000;

app.listen(port, () => console.log());

1. dependencies
- nodemon & inspector
npm i nodemon  --save-dev
"start": "nodemon --inspect index.js"

- morgan - HTTP logger
npm morgan --save-dev
const morgan = require('morgan')
app.use(morgan('combined'))

2. Template engine (handlebars)
- npm i express-handlebars
const {engine} = required('express-handlebars')

//Sửa lại đuôi file .handlebars -> .hbs
app.engine('hbs', engine({
	extname: '.hbs'
}))

//Cấu hình views - scr -> resources -> views -> layouts + partials
// __dirname là đường dẫn trỏ tới file index.js
app.set('view engine', 'hbs');
app.set('views', path.join(__dirname, 'resource/views'))

- partials: header.hbs + footer.hbs
- layouts: main.hbs

main.hbs
{{> header}}

{{body}}

{{> footer}}

(*) Nhớ khai báo path -  const path = require('path');

3. Static files & SASS
- app.use(express.static(path.join(__dirname, 'public'))); - trỏ đường dẫn đến file css tĩnh - __dirname = .../src + public

-SASS
npm i node-sass

- tạo folder scss trong resources
- tao file app.scss trong scss
- package.json -> scripts -> "watch": "node-sass --watch src/resources/scss --output src/public/css" -> Lắng nghe 2 folder scss và css
-> đọc từ file app.scss ở src/resources/scss complile sang file app.css ở src/public/css
- tạo file _variable.scss -> import vào app.scss - @import 'variable'; - file variable tạo các biến css - vd: $red-color: red;

4. Query parameters
vd: search?q=f8&ref=mycv&author=sondn 
- truy xuất bằng req.query 
 + vd: 
app.get('/search', (req, res) => {
	console.log(req.query);
	res.render('/search');
})
 + localhost:3000/search?name=tuanHA&age=18 => req.query: { name: 'tuanHA', age: '18' }

5. Form data
- Submit form sử dụng phương thức post
- truy xuất bằng req.body
(*) express tích hợp sẵn middleware vào query parameter -> dữ liệu được gửi bằng query parameter được lưu trực tiếp vào biến query
- nhưng đối với form data, middleware chưa được tích hợp sẵn để xử lý POST từ form data lên -> cài đặt middleware để xử lý dữ liệu từ Form data
	+ app.use(express.urlencoded({
		extended: true	
	})); - xử lý dữ liệu từ form data truyền lên
 	+ app.use(express.json()); - xử lý dữ liệu truyền lên bằng scripts,... (XMLHttpRequest, axios, fetch...)

- urlencoded <- body-parse npm <- qs npm (query string parse) 

6. MVC Model
- Browser -> request lên web server bằng HTTP protocol -> routes - định tuyến -> dispatcher -> controller -> tương tác với model lấy data ở database
-> để dữ liệu ở controller -> gọi view tương ứng -> xử lý - dùng data lấy được ở model chuyển sang view tạo nên view hoàn chỉnh -> trả về client

7. Routes and Controllers
- Action --> Dispatcher --> function handler

- cấu trúc thư mục:
	+ src -> app -> controllers
	+ src -> routes
- folder controllers 
  + Tạo file controller.js -> trong file js tạo class 
	-> method(req, res) {
		res.render('')
	}
	-- method ứng với từng đường dẫn khác nhau
     --> module.exports = new ClassName;

- folder routes --> tạo file .js (file định tuyến riêng vd: news.js, home.js...) --> khai báo router
	const express = require('express');
  	const router = express.Router();
	--> khai báo và sử dụng controller tương ứng đã tạo ở trên --> khai báo các phương thức với các đường dẫn và function tương ứng ở controller
	vd: router.use('/', newsController.index);

- folder routes --> tạo file index.js --> khai báo route vưa tạo ở trên - vd const newsRoute = require('./news') --> function route(app) 
	--> sử dụng path và route tương ứng - app.ues(path, newsRoute) 
- src/index.js khai báo const route = required('./routes'); --> route(app);


(*) LUỒNG ĐI: vd cho trang tin tức news
   - file src/index.js --> khai báo route - const route = require('./routes') --> gọi function route và truyền vào app - route(app); 
   - src/app/controllers --> tạo controller NewsController --> khai báo phương thức get, post,.. ứng với mỗi phương thức là 1 path tương ứng
	vd: showHomePage(req, res) {res.render('home');} // [GET] /
   - trong src/routes tạo file news.js --> khai báo newsController - const newsController = require('../app/controllers/NewsController'); --> khai báo router - router = express.Router()
	--> router.use('/', newsController.showHomePage) - path và kết nối tới phương thức tương ứng ở controller
   - file src/routes/index.js --> khai báo newsRouter - const newsRouter = require('./news') --> khai báo function route(app) --> app.use('/news', newsRouter); 

8. Install mongoDB
   
