- npm i express

- Khởi tạo dự án nodejs
   + npm init
   + Khởi chạy bằng node index.js

const express = required('express');
const app = express();
const port = 3000;

app.listen(port, () => console.log());

1. dependencies
- nodemon & inspector
npm i nodemon  --save-dev
"start": "nodemon --inspect index.js"

- morgan - HTTP logger
npm morgan --save-dev
const morgan = require('morgan')
app.use(morgan('combined'))

2. Template engine (handlebars)
- npm i express-handlebars
const {engine} = require('express-handlebars')

//Sửa lại đuôi file .handlebars -> .hbs
app.engine('hbs', engine({
	extname: '.hbs'
}))

//Cấu hình views - scr -> resources -> views -> layouts + partials
// __dirname là đường dẫn trỏ tới file index.js
app.set('view engine', 'hbs');
app.set('views', path.join(__dirname, 'resources/views'))

- partials: header.hbs + footer.hbs
- layouts: main.hbs

main.hbs
{{> header}}

{{{body}}}

{{> footer}}

(*) Nhớ khai báo path -  const path = require('path');

3. Static files & SASS
- app.use(express.static(path.join(__dirname, 'public'))); - trỏ đường dẫn đến file css tĩnh - __dirname = .../src + public

-SASS
npm i node-sass

- tạo folder scss trong resources
- tao file app.scss trong scss
- package.json -> scripts -> "watch": "node-sass --watch src/resources/scss --output src/public/css" -> Lắng nghe 2 folder scss và css
-> đọc từ file app.scss ở src/resources/scss complile sang file app.css ở src/public/css
- tạo file _variable.scss -> import vào app.scss - @import 'variable'; - file variable tạo các biến css - vd: $red-color: red;

4. Query parameters
vd: search?q=f8&ref=mycv&author=sondn 
- truy xuất bằng req.query 
 + vd: 
app.get('/search', (req, res) => {
	console.log(req.query);
	res.render('/search');
})
 + localhost:3000/search?name=tuanHA&age=18 => req.query: { name: 'tuanHA', age: '18' }

5. Form data
- Submit form sử dụng phương thức post
- truy xuất bằng req.body
(*) express tích hợp sẵn middleware vào query parameter -> dữ liệu được gửi bằng query parameter được lưu trực tiếp vào biến query
- nhưng đối với form data, middleware chưa được tích hợp sẵn để xử lý POST từ form data lên -> cài đặt middleware để xử lý dữ liệu từ Form data
	+ app.use(express.urlencoded({
		extended: true	
	})); - xử lý dữ liệu từ form data truyền lên
 	+ app.use(express.json()); - xử lý dữ liệu truyền lên bằng scripts,... (XMLHttpRequest, axios, fetch...)

- urlencoded <- body-parse npm <- qs npm (query string parse) 

6. MVC Model
- Browser -> request lên web server bằng HTTP protocol -> routes - định tuyến -> dispatcher -> controller -> tương tác với model lấy data ở database
-> để dữ liệu ở controller -> gọi view tương ứng -> xử lý - dùng data lấy được ở model chuyển sang view tạo nên view hoàn chỉnh -> trả về client

7. Routes and Controllers
- Action --> Dispatcher --> function handler

- cấu trúc thư mục:
	+ src -> app -> controllers
	+ src -> routes
- folder controllers 
  + Tạo file controller.js -> trong file js tạo class 
	-> method(req, res) {
		res.render('')
	}
	-- method ứng với từng đường dẫn khác nhau
     --> module.exports = new ClassName;

- folder routes --> tạo file .js (file định tuyến riêng vd: news.js, home.js...) --> khai báo router
	const express = require('express');
  	const router = express.Router();
	--> khai báo và sử dụng controller tương ứng đã tạo ở trên --> khai báo các phương thức với các đường dẫn và function tương ứng ở controller
	vd: router.get('/', newsController.index);

- folder routes --> tạo file index.js --> khai báo route vưa tạo ở trên - vd const newsRoute = require('./news') --> function route(app) 
	--> sử dụng path và route tương ứng - app.ues(path, newsRoute) 
- src/index.js khai báo const route = required('./routes'); --> route(app);


(*) LUỒNG ĐI: vd cho trang tin tức news 
   - src/app/controllers --> tạo controller NewsController --> khai báo phương thức get, post,.. ứng với mỗi phương thức là 1 path tương ứng
	vd: showHomePage(req, res) {res.render('home');} // [GET] /
	=> module.exports = new NewsController;

   - trong src/routes tạo file news.js --> khai báo newsController - const newsController = require('../app/controllers/NewsController'); --> khai báo router - router = express.Router()
	--> router.get('/', newsController.showHomePage) - path và kết nối tới phương thức tương ứng ở controller
	=> module.exports = new router;

   - file src/routes/index.js --> khai báo newsRouter - const newsRouter = require('./news') --> khai báo function route(app) --> app.use('/news', newsRouter); 
	=> module.exports = route;

   - file src/index.js --> khai báo route - const route = require('./routes') --> gọi function route và truyền vào app - route(app);

8. Install mongoDB
   
9. Prettier 
	CONTENT:
	1. code formatter
	2. lint-staged
	3. husky
npm i prettier lint-staged husky --save-dev
- prettier --single-quote (Chuyển nháy kép thành nháy đơn)
- prettier --trailing-comma (Thêm dấu phẩy ở cuối các phần tử của array hoặc object) all
- --write (sửa file)
- docs package.json (file áp dụng prettier)
- "beautiful": "prettier \"src/**/*.{js,json,scss}\" --write --single-quote --trailing-comma all --tab-width 4"


- lint-staged - format những file đã được add vào git
- add vào package.json
- "lint-staged": {
	"pattern to use command": "your command"
}

- vd: "lint-staged": {
	"src/**/*.{js, json, scss}": "prettier --tab-width 4 --single-quote --trailing-comma all  --write"
}


10. MCV - Model

	CONTENT:
	1. install mongoose
	2. connect to db
	3. create model

- mongodb - document database - khác với csdl quan hệ (SQL, mysql,..) các đối tượng có thể không đồng nhất về các field
- mongoose - là một công cụ mô hình hóa mongdb, được thiết kế để làm việc với môi trường bất đồng bộ (asynchronous environment) hỗ trợ cả promise và callbacks

- npm i mongoose
- src -> tạo folder config -> tạo folder db -> index.js
- Viết function connect tới DB

- const mongoose = require('mongoose'); 

async function connect () {
	try{
		await mongoose.connect('path', {
			useNewUrlParser: true,
            		useUnifiedTopology: true
		});
		console.log('Connect successfully!!!');
	} catch(error) {
		console.log('Connect failure!!!');
	}
}

module.exports = { connect };

- vd path: mongodb://localhost:27017/f8_education_dev

- src/index.js -> khai báo const db = required('./config/db'); --> db.connect();

- src/app -> tạo folder models -> tạo file Model.js vd: Course.js --> 
	+ Khai báo mongoose - const mongoose = require('mongoose');
	+ Khai báo Schema - const Schema = mongoose.Schema;
	+ const Course = new Schema({
		name: {type: String, default: '', maxLength: 255},
		description: {type: String, default: '', maxLength: 600},
	})

	+ module.exports = mongoose.model('Course', Course);

- src/app/controller --> trả về dữ liệu --> khai báo Course = require('./models/Course');
	--> viết phương thức trả về dữ liệu 
	vd: course(req, res) {
		Course.find({})
            .then(courses => {
                res.json(courses);
            })
            .catch(err => {
                res.status(400).json({ error: 'ERROR!' });
            })
	}
	

11.
	CONTENT: 
	1. JSON viewer 
	2. Route methods
	3. App listen log
	4. Resource path

1. Cài đặt extension JSON viewer chrome - làm đẹp file json được trả về từ server -> client


12. [CRUD] Read from db
	1. Truyền dữ liệu từ controller sang view
	- vd: Ở controller có method render trang home
		home(req, res, next) {
			Course.find({})
			.then(courses => {res.render('home', {
				title: 'Home',
				courses: courses,  //Truyền dữ liệu sang view dưới dạng object
			})})
			.catch(next);
		}

	2. Hiển thị dữ liệu được truyền từ controller ở view
	+ Đối với string
	<h1>{{title}}</h1>

	+ Đối với object
	vd:person: {
		firstName: 'Ellen',
		lastName: 'Joe',
	}

	--> {{#with person }}
		{{firstName}} {{lastName}}
	{{/with}}

	+ Đối với array
	vd: people: [
		'Raiden Ei',
		'Ellen Joe',
		'Firefly',
	]

	--> {{#eaach people}}
		{{this}}
	{{/each}}

	(*) Đối với object và array --> sửa lại 1 tí ở controller
	- courses : courses.map(courses => courses.toObject(courses));
	==> Biến object constructor được trả về từ mongoose thành object literal qua phương thức .toOject()
	

	(*) Tránh việc duplicate code --> tiến hành tạo một function xử lý object
	- src tạo folder util --> tạo file mongoose.js 
	- Tạo các function xử lý biến constructor object -> literal object
	- module.exports = {
		multipleMongooseToObject: function(mongooseArray) {
			return mongooseArray.map(mongoose => mongoose.toObject());
		},
		mongooseToObject: function(mongoose) {
			return mongoose ? mongoose.toObject(mongoose) : mongoose;
		}
	}
	
(*) Đọc docs handlebarsjs để tìm hiểu thêm 


13. 
- add showDetail function

showDetailCourses(req, res, next) {
        Course.findOne({ slug: req.params.slug })
            .then(course => {
                res.render('courses/show', {course: mongooseToObject(course)});
            })
            .catch(next);
    }

14. add create function

- npm i mongoose-slug-generator
- add plugin mongoose-slug-generator vào model
	
